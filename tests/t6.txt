ADD R2, R0, R0        ; Initialize R2=0 (memory base address)
LOAD R1, 0(R2)       ; Load input value from memory[0] into R1
ADD R3, R0, R0       ; Initialize R3=0 (result register)
CALL 8               ; Call subroutine at PC=5
STORE R3, 1(R2)      ; Store result to memory[1]
SUB R1, R1, R6       ; Decrement counter (R1 -= 1)
BEQ R0, R0, 3       ; Branch to end if R1=0 (PC=7)
ADD R5, R5, R6       ; Increment subroutine PC (R5 += 1)
RET                  ; Return to caller (PC=4)
NOR R3, R1, R3       ; R3 = ~(R1 | R3)
MUL R3, R3, R4       ; R3 = R3 * R4
SUB R3, R3, R7       ; R3 = R3 - R7


0:2      ; Counter for 2 iterations
1:0      ; Location for result